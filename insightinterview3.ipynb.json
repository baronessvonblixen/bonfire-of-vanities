{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Insight Interview Breast Cancer Data Project"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 688 entries, 0 to 15779\n",
      "Data columns (total 11 columns):\n",
      "ID                             688 non-null int64\n",
      "Clump Thickness                688 non-null int64\n",
      "Uniformity of Cell Size        688 non-null object\n",
      "Uniformity of Cell Shape       688 non-null object\n",
      "Marginal Adhesion              688 non-null object\n",
      "Single Epithelial Cell Size    688 non-null object\n",
      "Bare Nuclei                    688 non-null object\n",
      "Bland Chromatin                688 non-null object\n",
      "Normal Nucleoli                688 non-null object\n",
      "Mitoses                        688 non-null object\n",
      "Class                          688 non-null float64\n",
      "dtypes: float64(1), int64(2), object(8)\n",
      "memory usage: 64.5+ KB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 344 entries, 0 to 7711\n",
      "Data columns (total 11 columns):\n",
      "ID                             344 non-null int64\n",
      "Clump Thickness                344 non-null int64\n",
      "Uniformity of Cell Size        344 non-null object\n",
      "Uniformity of Cell Shape       344 non-null object\n",
      "Marginal Adhesion              344 non-null object\n",
      "Single Epithelial Cell Size    344 non-null object\n",
      "Bare Nuclei                    344 non-null object\n",
      "Bland Chromatin                344 non-null object\n",
      "Normal Nucleoli                344 non-null object\n",
      "Mitoses                        344 non-null object\n",
      "Class                          344 non-null float64\n",
      "dtypes: float64(1), int64(2), object(8)\n",
      "memory usage: 32.2+ KB\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#importing libraries \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import normaltest\n",
    "\n",
    "#load txt file as a dataframe. make wrong entries NaNs\n",
    "data = pd.read_csv('Desktop/breast-cancer-wisconsin.txt', index_col = \"Index\", na_values={'Class':['No idea', '#','40','20', '?']})\n",
    "\n",
    "#clean data of duplicate and invalid entries\n",
    "dataclean = data.drop_duplicates()\n",
    "dataclean_filter = dataclean.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)\n",
    "#print(dataclean_filter)\n",
    "dataclean_filter.info()\n",
    "\n",
    "#slice data in half to create a training data set and test data set\n",
    "shape = dataclean_filter.shape\n",
    "#print(shape)\n",
    "length = shape[0]-1\n",
    "#print(length)\n",
    "halflength = length/2\n",
    "#print(halflength)\n",
    "training = dataclean_filter.head(344)\n",
    "#print(training)\n",
    "training.info()\n",
    "\n",
    "#make sure there are only one of each biopsy ID in the dataset\n",
    "close_id = training['ID'].values\n",
    "frequency_id = np.bincount(close_id)\n",
    "plt.plot(frequency_id)\n",
    "plt.xlim(0,1.5e6)\n",
    "plt.xlabel('ID number')\n",
    "plt.ylabel('Number in Data Set')\n",
    "plt.title('Frequency of Duplicate IDs in Training Set')\n",
    "plt.show()\n",
    "\n",
    "#There are many many duplicate data sets in the work.  Possibilities: 1. same patient different biopsies; \n",
    "#2.Same biopsy different pathologists; 3. accidental redundacy, etc. Histogram of training set revealed same ID \n",
    "#with different scores. This removes option 3. for these data points. Still, in an ideal world, should not treat \n",
    "#these as independent. For time being, remove total duplicates, keep different scores.  If anything, it will \n",
    "#lower the fidelity of the model. \n",
    "\n",
    "#data type for all catagories not the same (integers vs. non-null objects) Because I am planning on using numpy \n",
    "#array-like structures for analysis, shouldn't be a problem. But keep in mind with debugging. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 223 entries, 6332 to 1892\n",
      "Data columns (total 11 columns):\n",
      "ID                             223 non-null int64\n",
      "Clump Thickness                223 non-null int64\n",
      "Uniformity of Cell Size        223 non-null object\n",
      "Uniformity of Cell Shape       223 non-null object\n",
      "Marginal Adhesion              223 non-null object\n",
      "Single Epithelial Cell Size    223 non-null object\n",
      "Bare Nuclei                    223 non-null object\n",
      "Bland Chromatin                223 non-null object\n",
      "Normal Nucleoli                223 non-null object\n",
      "Mitoses                        223 non-null object\n",
      "Class                          223 non-null float64\n",
      "dtypes: float64(1), int64(2), object(8)\n",
      "memory usage: 20.9+ KB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 121 entries, 6345 to 7711\n",
      "Data columns (total 11 columns):\n",
      "ID                             121 non-null int64\n",
      "Clump Thickness                121 non-null int64\n",
      "Uniformity of Cell Size        121 non-null object\n",
      "Uniformity of Cell Shape       121 non-null object\n",
      "Marginal Adhesion              121 non-null object\n",
      "Single Epithelial Cell Size    121 non-null object\n",
      "Bare Nuclei                    121 non-null object\n",
      "Bland Chromatin                121 non-null object\n",
      "Normal Nucleoli                121 non-null object\n",
      "Mitoses                        121 non-null object\n",
      "Class                          121 non-null float64\n",
      "dtypes: float64(1), int64(2), object(8)\n",
      "memory usage: 11.3+ KB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 121 entries, 6332 to 2074\n",
      "Data columns (total 11 columns):\n",
      "ID                             121 non-null int64\n",
      "Clump Thickness                121 non-null int64\n",
      "Uniformity of Cell Size        121 non-null object\n",
      "Uniformity of Cell Shape       121 non-null object\n",
      "Marginal Adhesion              121 non-null object\n",
      "Single Epithelial Cell Size    121 non-null object\n",
      "Bare Nuclei                    121 non-null object\n",
      "Bland Chromatin                121 non-null object\n",
      "Normal Nucleoli                121 non-null object\n",
      "Mitoses                        121 non-null object\n",
      "Class                          121 non-null float64\n",
      "dtypes: float64(1), int64(2), object(8)\n",
      "memory usage: 11.3+ KB\n",
      "Benign Sample does not look Gaussian (reject H0)\n",
      "Malignant Sample does not look Gaussian (reject H0)\n",
      "Benign Sample does not look Gaussian (reject H0)\n",
      "Malignant Sample does not look Gaussian (reject H0)\n",
      "Benign Sample does not look Gaussian (reject H0)\n",
      "Malignant Sample does not look Gaussian (reject H0)\n",
      "Benign Sample does not look Gaussian (reject H0)\n",
      "Malignant Sample does not look Gaussian (reject H0)\n",
      "Benign Sample does not look Gaussian (reject H0)\n",
      "Malignant Sample does not look Gaussian (reject H0)\n",
      "Benign Sample does not look Gaussian (reject H0)\n",
      "Malignant Sample does not look Gaussian (reject H0)\n",
      "Benign Sample does not look Gaussian (reject H0)\n",
      "Malignant Sample does not look Gaussian (reject H0)\n",
      "Benign Sample does not look Gaussian (reject H0)\n",
      "Malignant Sample does not look Gaussian (reject H0)\n",
      "Benign Sample does not look Gaussian (reject H0)\n",
      "Malignant Sample does not look Gaussian (reject H0)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#sort begnin-4 from malignant-2 last column\n",
    "class_sort = training.sort_values(by=['Class'])\n",
    "malignant_pre = class_sort[class_sort['Class']==2]\n",
    "malignant_pre.info()\n",
    "benign = class_sort[class_sort['Class']==4]\n",
    "benign.info()\n",
    "\n",
    "#malignant_pre is >2X size of benign data set.  trim so they have the same # for statistics\n",
    "malignant = malignant_pre.head(121)\n",
    "malignant.info()\n",
    "\n",
    "#make histograms of thickness, size, shape, marginal adhesion, single epi cell size, bare nuclei, bland chromatin, \n",
    "#normal nucleoli, mitoses\n",
    "\n",
    "#thickness\n",
    "plt.figure(0)\n",
    "benign_thickness= benign['Clump Thickness'].values\n",
    "mal_thickness=malignant['Clump Thickness'].values \n",
    "hist_b_thickness= plt.hist(benign_thickness, bins=10, range=(0,10), label='benign')\n",
    "hist_m_thickness= plt.hist(mal_thickness, bins=10, range=(0,10), label='malignant')\n",
    "plt.title('Clump Thickness')\n",
    "plt.xlabel('Score')\n",
    "plt.ylabel('Frequency')\n",
    "plt.legend()\n",
    "\n",
    "\n",
    "#D'Agastino K^2 test\n",
    "stat, pb = normaltest(benign_thickness)\n",
    "stat, pm = normaltest(mal_thickness)\n",
    "alpha = 0.05\n",
    "if pb > alpha:\n",
    "\tprint('Benign Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Benign Sample does not look Gaussian (reject H0)')\n",
    "if pm > alpha:\n",
    "\tprint('Malignant Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Malignant Sample does not look Gaussian (reject H0)')\n",
    "\n",
    "\n",
    "#size uniformity\n",
    "plt.figure(1)\n",
    "benign_size= benign['Uniformity of Cell Size'].astype(str).astype(int)\n",
    "mal_size=malignant['Uniformity of Cell Size'].astype(str).astype(int)\n",
    "hist_b_size= plt.hist(benign_size, bins=10, range=(0,10), label='benign')\n",
    "hist_m_size= plt.hist(mal_size, bins=10, range=(0,10), label='malignant')\n",
    "plt.title('Uniformity of Cell Size')\n",
    "plt.xlabel('Score')\n",
    "plt.ylabel('Frequency')\n",
    "plt.legend()\n",
    "\n",
    "#D'Agastino K^2 test\n",
    "stat, pb = normaltest(benign_size)\n",
    "stat, pm = normaltest(mal_size)\n",
    "alpha = 0.05\n",
    "if pb > alpha:\n",
    "\tprint('Benign Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Benign Sample does not look Gaussian (reject H0)')\n",
    "if pm > alpha:\n",
    "\tprint('Malignant Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Malignant Sample does not look Gaussian (reject H0)')\n",
    "\n",
    "#shape uniformity\n",
    "plt.figure(2)\n",
    "benign_shape= benign['Uniformity of Cell Shape'].astype(str).astype(int)\n",
    "mal_shape=malignant['Uniformity of Cell Shape'].astype(str).astype(int)\n",
    "hist_b_shape= plt.hist(benign_shape, bins=10, range=(0,10), label='benign')\n",
    "hist_m_shape= plt.hist(mal_shape, bins=10, range=(0,10), label='malignant')\n",
    "plt.title('Uniformity of Cell Shape')\n",
    "plt.xlabel('Score')\n",
    "plt.ylabel('Frequency')\n",
    "plt.legend()\n",
    "\n",
    "#D'Agastino K^2 test\n",
    "stat, pb = normaltest(benign_shape)\n",
    "stat, pm = normaltest(mal_shape)\n",
    "alpha = 0.05\n",
    "if pb > alpha:\n",
    "\tprint('Benign Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Benign Sample does not look Gaussian (reject H0)')\n",
    "if pm > alpha:\n",
    "\tprint('Malignant Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Malignant Sample does not look Gaussian (reject H0)')\n",
    "    \n",
    "#marginal adhesion\n",
    "plt.figure(3)\n",
    "benign_ma= benign['Marginal Adhesion'].astype(str).astype(int)\n",
    "mal_ma=malignant['Marginal Adhesion'].astype(str).astype(int)\n",
    "hist_b_ma= plt.hist(benign_ma, bins=10, range=(0,10), label='benign')\n",
    "hist_m_ma= plt.hist(mal_ma, bins=10, range=(0,10), label='malignant')\n",
    "plt.title('Marginal Adhesion')\n",
    "plt.xlabel('Score')\n",
    "plt.ylabel('Frequency')\n",
    "plt.legend()\n",
    "\n",
    "#D'Agastino K^2 test\n",
    "stat, pb = normaltest(benign_ma)\n",
    "stat, pm = normaltest(mal_ma)\n",
    "alpha = 0.05\n",
    "if pb > alpha:\n",
    "\tprint('Benign Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Benign Sample does not look Gaussian (reject H0)')\n",
    "if pm > alpha:\n",
    "\tprint('Malignant Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Malignant Sample does not look Gaussian (reject H0)')\n",
    "\n",
    "#single epithelial cell size\n",
    "plt.figure(4)\n",
    "benign_ecs= benign['Single Epithelial Cell Size'].astype(str).astype(int)\n",
    "mal_ecs=malignant['Single Epithelial Cell Size'].astype(str).astype(int)\n",
    "hist_b_ecs= plt.hist(benign_ecs, bins=10, range=(0,10), label='benign')\n",
    "hist_m_ecs= plt.hist(mal_ecs, bins=10, range=(0,10), label='malignant')\n",
    "plt.title('Single Epithelial Cell Size')\n",
    "plt.xlabel('Score')\n",
    "plt.ylabel('Frequency')\n",
    "plt.legend()\n",
    "\n",
    "#D'Agastino K^2 test\n",
    "stat, pb = normaltest(benign_ecs)\n",
    "stat, pm = normaltest(mal_ecs)\n",
    "alpha = 0.05\n",
    "if pb > alpha:\n",
    "\tprint('Benign Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Benign Sample does not look Gaussian (reject H0)')\n",
    "if pm > alpha:\n",
    "\tprint('Malignant Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Malignant Sample does not look Gaussian (reject H0)')\n",
    "    \n",
    "#bare nuclei\n",
    "plt.figure(5)\n",
    "benign_noquestion = benign.replace('?', np.nan)\n",
    "benign_dropquest= benign_noquestion.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)\n",
    "malignant_noquestion = malignant.replace('?', np.nan)\n",
    "malignant_dropquest= malignant_noquestion.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)\n",
    "benign_barenuc= benign_dropquest['Bare Nuclei'].astype(str).astype(int)\n",
    "mal_barenuc=malignant_dropquest['Bare Nuclei'].astype(str).astype(int)\n",
    "hist_b_barenuc= plt.hist(benign_barenuc, bins=10, range=(0,10), label='benign')\n",
    "hist_m_barenuc= plt.hist(mal_barenuc, bins=10, range=(0,10), label='malignant')\n",
    "plt.title('Bare Nuclei')\n",
    "plt.xlabel('Score')\n",
    "plt.ylabel('Frequency')\n",
    "plt.legend()\n",
    "\n",
    "#D'Agastino K^2 test\n",
    "stat, pb = normaltest(benign_barenuc)\n",
    "stat, pm = normaltest(mal_barenuc)\n",
    "alpha = 0.05\n",
    "if pb > alpha:\n",
    "\tprint('Benign Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Benign Sample does not look Gaussian (reject H0)')\n",
    "if pm > alpha:\n",
    "\tprint('Malignant Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Malignant Sample does not look Gaussian (reject H0)')\n",
    "\n",
    "#bland chromatin\n",
    "plt.figure(6)\n",
    "benign_blandchrom= benign['Bland Chromatin'].astype(str).astype(int)\n",
    "mal_blandchrom=malignant['Bland Chromatin'].astype(str).astype(int)\n",
    "hist_blandchrom= plt.hist(benign_blandchrom, bins=10, range=(0,10), label='benign')\n",
    "hist_m_blandchrom= plt.hist(mal_blandchrom, bins=10, range=(0,10), label='malignant')\n",
    "plt.title('Bland Chromatin')\n",
    "plt.xlabel('Score')\n",
    "plt.ylabel('Frequency')\n",
    "plt.legend()\n",
    "\n",
    "#D'Agastino K^2 test\n",
    "stat, pb = normaltest(benign_blandchrom)\n",
    "stat, pm = normaltest(mal_blandchrom)\n",
    "alpha = 0.05\n",
    "if pb > alpha:\n",
    "\tprint('Benign Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Benign Sample does not look Gaussian (reject H0)')\n",
    "if pm > alpha:\n",
    "\tprint('Malignant Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Malignant Sample does not look Gaussian (reject H0)')\n",
    "\n",
    "#normal nucleoli\n",
    "plt.figure(7)\n",
    "benign_normnuc= benign['Normal Nucleoli'].astype(str).astype(int)\n",
    "mal_normnuc=malignant['Normal Nucleoli'].astype(str).astype(int)\n",
    "hist_normnuc= plt.hist(benign_normnuc, bins=10, range=(0,10), label='benign')\n",
    "hist_normnuc= plt.hist(mal_normnuc, bins=10, range=(0,10), label='malignant')\n",
    "plt.title('Normal Nucleoli')\n",
    "plt.xlabel('Score')\n",
    "plt.ylabel('Frequency')\n",
    "plt.legend()\n",
    "\n",
    "#D'Agastino K^2 test\n",
    "stat, pb = normaltest(benign_normnuc)\n",
    "stat, pm = normaltest(mal_normnuc)\n",
    "alpha = 0.05\n",
    "if pb > alpha:\n",
    "\tprint('Benign Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Benign Sample does not look Gaussian (reject H0)')\n",
    "if pm > alpha:\n",
    "\tprint('Malignant Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Malignant Sample does not look Gaussian (reject H0)')\n",
    "\n",
    "#mitoses\n",
    "plt.figure(8)\n",
    "benign_mitosis= benign['Mitoses'].astype(str).astype(int)\n",
    "mal_mitosis=malignant['Mitoses'].astype(str).astype(int)\n",
    "hist_mitosis= plt.hist(benign_mitosis, bins=10, range=(0,10), label='benign')\n",
    "hist_mitosis= plt.hist(mal_mitosis, bins=10, range=(0,10), label='malignant')\n",
    "plt.title('Mitoses')\n",
    "plt.xlabel('Score')\n",
    "plt.ylabel('Frequency')\n",
    "plt.legend()\n",
    "\n",
    "#D'Agastino K^2 test\n",
    "stat, pb = normaltest(benign_mitosis)\n",
    "stat, pm = normaltest(mal_mitosis)\n",
    "alpha = 0.05\n",
    "if pb > alpha:\n",
    "\tprint('Benign Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Benign Sample does not look Gaussian (reject H0)')\n",
    "if pm > alpha:\n",
    "\tprint('Malignant Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Malignant Sample does not look Gaussian (reject H0)')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Thickness\n",
      "benign median is 8.0 and std is 2.440606552527216\n",
      "malignant median is 3.0 and std is 1.7056057308448833\n",
      "Mann Whitney U test p value is 1.3777143431761224e-30\n",
      "The effect size is 74.1497883726075\n",
      "Uniformity of Size\n",
      "benign median is 7.0 and std is 2.6595138913678418\n",
      "malignant median is 1.0 and std is 0.8765007327975438\n",
      "Mann Whitney U test p value is 1.3260230996368953e-40\n",
      "Uniformity of Shape\n",
      "benign median is 7.0 and std is 2.592566066960801\n",
      "malignant median is 1.0 and std is 0.8637055609116626\n",
      "Mann Whitney U test p value is 6.931179055488169e-41\n",
      "Marginal Adhesion\n",
      "benign median is 5.0 and std is 3.206398561554255\n",
      "malignant median is 1.0 and std is 1.4464462715477138\n",
      "Mann Whitney U test p value is 6.289480725254033e-26\n",
      "Epithelial Cell Size\n",
      "benign median is 5.0 and std is 2.494800275244442\n",
      "malignant median is 2.0 and std is 1.1201929834616482\n",
      "Mann Whitney U test p value is 9.357758112467153e-31\n",
      "Bare Nuclei\n",
      "benign median is 10.0 and std is 3.2082792203228743\n",
      "malignant median is 1.0 and std is 1.2944450093425013\n",
      "Mann Whitney U test p value is 8.74032952490689e-36\n",
      "Bland Chromatin\n",
      "benign median is 7.0 and std is 2.268019165493409\n",
      "malignant median is 2.0 and std is 1.3278808441913996\n",
      "Mann Whitney U test p value is 8.091495533480455e-31\n",
      "Normal Nucleoli\n",
      "benign median is 6.0 and std is 3.4078660459229364\n",
      "malignant median is 1.0 and std is 1.2400550364435114\n",
      "Mann Whitney U test p value is 3.6672553566289395e-28\n",
      "Mitoses\n",
      "benign median is 1.0 and std is 2.699153816105533\n",
      "malignant median is 1.0 and std is 0.7490175246527044\n",
      "Mann Whitney U test p value is 8.852711392300409e-13\n"
     ]
    }
   ],
   "source": [
    "#calculate median, sd, and perform Mann Whitney tests on data to see if distributions are statistically significant. \n",
    "#also determine effect size\n",
    "\n",
    "from scipy.stats import mannwhitneyu\n",
    "\n",
    "#thickness\n",
    "print('Thickness')\n",
    "med_b_thickness = np.median(benign_thickness)\n",
    "std_b_thickness = np.std(benign_thickness)\n",
    "thickness_stringb = \"benign median is {} and std is {}\".format(med_b_thickness, std_b_thickness)\n",
    "print(thickness_stringb)\n",
    "med_m_thickness = np.median(mal_thickness)\n",
    "std_m_thickness = np.std(mal_thickness)\n",
    "thickness_stringm = \"malignant median is {} and std is {}\".format(med_m_thickness, std_m_thickness)\n",
    "print(thickness_stringm)\n",
    "\n",
    "stat,pmw = (mannwhitneyu(benign_thickness, mal_thickness))            \n",
    "thick_mannwhit_string = \"Mann Whitney U test p value is {}\".format(pmw)\n",
    "print(thick_mannwhit_string)\n",
    "\n",
    "thick_effect_size = stat/np.sqrt(242)\n",
    "thick_effect_size_string = \"The effect size is {}\".format(thick_effect_size)\n",
    "print(thick_effect_size_string)\n",
    "\n",
    "#size uniformity\n",
    "print('Uniformity of Size')\n",
    "med_b_size = np.median(benign_size)\n",
    "std_b_size = np.std(benign_size)\n",
    "size_stringb = \"benign median is {} and std is {}\".format(med_b_size, std_b_size)\n",
    "print(size_stringb)\n",
    "med_m_size = np.median(mal_size)\n",
    "std_m_size = np.std(mal_size)\n",
    "size_stringm = \"malignant median is {} and std is {}\".format(med_m_size, std_m_size)\n",
    "print(size_stringm)\n",
    "\n",
    "stat,pmw = (mannwhitneyu(benign_size, mal_size))            \n",
    "size_mannwhit_string = \"Mann Whitney U test p value is {}\".format(pmw)\n",
    "print(size_mannwhit_string)\n",
    "\n",
    "#shape uniformity\n",
    "print('Uniformity of Shape')\n",
    "med_b_shape = np.median(benign_shape)\n",
    "std_b_shape = np.std(benign_shape)\n",
    "shape_stringb = \"benign median is {} and std is {}\".format(med_b_shape, std_b_shape)\n",
    "print(shape_stringb)\n",
    "med_m_shape = np.median(mal_shape)\n",
    "std_m_shape = np.std(mal_shape)\n",
    "shape_stringm = \"malignant median is {} and std is {}\".format(med_m_shape, std_m_shape)\n",
    "print(shape_stringm)\n",
    "\n",
    "stat,pmw = (mannwhitneyu(benign_shape, mal_shape))            \n",
    "shape_mannwhit_string = \"Mann Whitney U test p value is {}\".format(pmw)\n",
    "print(shape_mannwhit_string)\n",
    "\n",
    "#marginal adhesion\n",
    "print('Marginal Adhesion')\n",
    "med_b_ma = np.median(benign_ma)\n",
    "std_b_ma = np.std(benign_ma)\n",
    "ma_stringb = \"benign median is {} and std is {}\".format(med_b_ma, std_b_ma)\n",
    "print(ma_stringb)\n",
    "med_m_ma = np.median(mal_ma)\n",
    "std_m_ma = np.std(mal_ma)\n",
    "ma_stringm = \"malignant median is {} and std is {}\".format(med_m_ma, std_m_ma)\n",
    "print(ma_stringm)\n",
    "\n",
    "stat,pmw = (mannwhitneyu(benign_ma, mal_ma))            \n",
    "ma_mannwhit_string = \"Mann Whitney U test p value is {}\".format(pmw)\n",
    "print(ma_mannwhit_string)\n",
    "\n",
    "#epithelial cell size\n",
    "print('Epithelial Cell Size')\n",
    "med_b_ecs = np.median(benign_ecs)\n",
    "std_b_ecs = np.std(benign_ecs)\n",
    "ecs_stringb = \"benign median is {} and std is {}\".format(med_b_ecs, std_b_ecs)\n",
    "print(ecs_stringb)\n",
    "med_m_ecs = np.median(mal_ecs)\n",
    "std_m_ecs = np.std(mal_ecs)\n",
    "ecs_stringm = \"malignant median is {} and std is {}\".format(med_m_ecs, std_m_ecs)\n",
    "print(ecs_stringm)\n",
    "\n",
    "stat,pmw = (mannwhitneyu(benign_ecs, mal_ecs))            \n",
    "ecs_mannwhit_string = \"Mann Whitney U test p value is {}\".format(pmw)\n",
    "print(ecs_mannwhit_string)\n",
    "\n",
    "#bare nuclei\n",
    "print('Bare Nuclei')\n",
    "med_b_barenuc = np.median(benign_barenuc)\n",
    "std_b_barenuc = np.std(benign_barenuc)\n",
    "barenuc_stringb = \"benign median is {} and std is {}\".format(med_b_barenuc, std_b_barenuc)\n",
    "print(barenuc_stringb)\n",
    "med_m_barenuc = np.median(mal_barenuc)\n",
    "std_m_barenuc = np.std(mal_barenuc)\n",
    "barenuc_stringm = \"malignant median is {} and std is {}\".format(med_m_barenuc, std_m_barenuc)\n",
    "print(barenuc_stringm)\n",
    "\n",
    "stat,pmw = (mannwhitneyu(benign_barenuc, mal_barenuc))            \n",
    "barenuc_mannwhit_string = \"Mann Whitney U test p value is {}\".format(pmw)\n",
    "print(barenuc_mannwhit_string)\n",
    "\n",
    "#bland chromatin\n",
    "print('Bland Chromatin')\n",
    "med_b_blandchrom = np.median(benign_blandchrom)\n",
    "std_b_blandchrom = np.std(benign_blandchrom)\n",
    "blandchrom_stringb = \"benign median is {} and std is {}\".format(med_b_blandchrom, std_b_blandchrom)\n",
    "print(blandchrom_stringb)\n",
    "med_m_blandchrom = np.median(mal_blandchrom)\n",
    "std_m_blandchrom = np.std(mal_blandchrom)\n",
    "blandchrom_stringm = \"malignant median is {} and std is {}\".format(med_m_blandchrom, std_m_blandchrom)\n",
    "print(blandchrom_stringm)\n",
    "\n",
    "stat,pmw = (mannwhitneyu(benign_blandchrom, mal_blandchrom))            \n",
    "blandchrom_mannwhit_string = \"Mann Whitney U test p value is {}\".format(pmw)\n",
    "print(blandchrom_mannwhit_string)\n",
    "\n",
    "#normal nucleoli\n",
    "print('Normal Nucleoli')\n",
    "med_b_normnuc = np.median(benign_normnuc)\n",
    "std_b_normnuc = np.std(benign_normnuc)\n",
    "normnuc_stringb = \"benign median is {} and std is {}\".format(med_b_normnuc, std_b_normnuc)\n",
    "print(normnuc_stringb)\n",
    "med_m_normnuc = np.median(mal_normnuc)\n",
    "std_m_normnuc = np.std(mal_normnuc)\n",
    "normnuc_stringm = \"malignant median is {} and std is {}\".format(med_m_normnuc, std_m_normnuc)\n",
    "print(normnuc_stringm)\n",
    "\n",
    "stat,pmw = (mannwhitneyu(benign_normnuc, mal_normnuc))            \n",
    "normnuc_mannwhit_string = \"Mann Whitney U test p value is {}\".format(pmw)\n",
    "print(normnuc_mannwhit_string)\n",
    "\n",
    "#mitoses\n",
    "print('Mitoses')\n",
    "med_b_mitosis = np.median(benign_mitosis)\n",
    "std_b_mitosis = np.std(benign_mitosis)\n",
    "mitosis_stringb = \"benign median is {} and std is {}\".format(med_b_mitosis, std_b_mitosis)\n",
    "print(mitosis_stringb)\n",
    "med_m_mitosis = np.median(mal_mitosis)\n",
    "std_m_mitosis = np.std(mal_mitosis)\n",
    "mitosis_stringm = \"malignant median is {} and std is {}\".format(med_m_mitosis, std_m_mitosis)\n",
    "print(mitosis_stringm)\n",
    "\n",
    "stat,pmw = (mannwhitneyu(benign_mitosis, mal_mitosis))            \n",
    "mitosis_mannwhit_string = \"Mann Whitney U test p value is {}\".format(pmw)\n",
    "print(mitosis_mannwhit_string)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
